import logging

from aiogram import F, Router
from aiogram.filters import Command, CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from keyboards.keyboards import main_kb
from lexicon.lexicon import LEXICON_RU
from services import get_or_create_user


router = Router()
# router.message.filter(F.from_user.id == 198885006)
logger = logging.getLogger(__name__)


@router.message(CommandStart())
async def process_start_command(message: Message):
    # TODO:
    # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ç–∞–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    # –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ —Å–æ–∑–¥–∞—Ç—å
    # –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ - —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É
    # –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–¥–∞—á —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Å–º–æ—Ç–µ—Ä—Ç—å, –¥–æ–±–∞–≤–∏—Ç—å, –≤—ã–ø–æ–ª–Ω–∏—Ç—å
    await get_or_create_user(message.from_user.id, message.from_user.username) #type: ignore
    await message.answer(
        text=LEXICON_RU["/start"],
        reply_markup=main_kb
    )


@router.message(Command(commands="help"))
async def process_help_command(message: Message):
    await message.answer(text=LEXICON_RU["/help"])


@router.message(Command(commands="main"))
async def process_main_command(message: Message):
    # –ó–∞–≥–ª—É—à–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
    tasks = [f"–ó–∞–¥–∞—á–∞ {i} (–º–∞–∫—Å 64 –±–∞–π—Ç–∞) " for i in range(5)]

    builder = InlineKeyboardBuilder()

    await message.answer(
        text="\t\t\t\tüìã –ó–∞–¥–∞—á–∏ etd:\t\t\t\t",
        reply_markup=builder.as_markup()
    )

    if tasks:

        for i in range(len(tasks)):
            temp_builder = InlineKeyboardBuilder()
            temp_builder.button(
                text="üëÅ View",
                callback_data=f"view_{i}",  # id of real task
            )

            temp_builder.button(
                text="‚úÖ Done",
                callback_data=f"done_{i}",  # id of real task
            )

            await message.answer(
                text=f"–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ {i}",  # task_title
                reply_markup=temp_builder.as_markup()
            )
        

@router.callback_query(F.data.startswith("view_"))
async def handle_view_buttons(callback_query: CallbackQuery):
    logger.info(f"–Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ view callback_query.data: {callback_query}")


@router.callback_query(F.data.startswith("done_"))
async def handle_done_buttons(callback_query: CallbackQuery):
    logger.info(f"–Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ done callback_query.data: {callback_query.data}")


@router.message(F.content_type == 'text')
async def handle_text_message(message: Message):
    # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–∞—Å–∫–∏
    logger.info(f"—Ç–µ–∫—Å—Ç –ø–æ–π–º–∞–Ω {message}")
