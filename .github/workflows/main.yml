# Файл main.yml
name: Task-tracker workflow
# Перечень событий-триггеров, при которых должен запускаться workflow
on:
  # Событие push возникает,
  # когда изменения исходного кода приходят на сервер GitHub
  push:
    # Отслеживаем изменения только в ветке main
    branches:
      - main
# Перечень задач
jobs:
  tests:
    # Разворачиваем окружение:
    runs-on: ubuntu-latest

    steps:
    # Копируем код проекта
    - name: Check out code
      uses: actions/checkout@v3
    # Устанавливаем Python с помощью action
    - name: Set up Python
      uses: actions/setup-python@v4
    # В action setup-python@v4 передаём параметр — версию Python
      with:
        python-version: 3.13.5
    # Обновляем pip, устанавливаем pytest
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip 
        pip install flake8 flake8-isort
        pip install pytest
    # Запускаем pytest
    - name: Test with pytest
      run: pytest |
           python -m flake8

  build_and_push_to_docker_hub:
    name: Push Docker image to DockerHub
    runs-on: ubuntu-latest
    needs: tests  # Не выполнять сразу, ждать, пока выполнится tests
    steps:
      - name: Check out the repo
        # Получение исходного кода из репозитория
        uses: actions/checkout@v3
      - name: Set up Docker Buildx
        # Установка сборщика контейнеров Docker
        uses: docker/setup-buildx-action@v2
      - name: Login to Docker 
        # Авторизация на Docker Hub
        uses: docker/login-action@v2
        # При помощи with передаём в action параметры username и password
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          # Хорошо ли держать логин и пароль прямо в коде workflow?
          # Нет, это нехорошо
      - name: Push to DockerHub
        # Одновременный билд и пуш образа в Docker Hub
        uses: docker/build-push-action@v4
        with:
          # Параметр push: true указывает, что образ нужно не только собрать,
          # но и отправить на Docker Hub
          push: true
          # В параметре tags задаётся название и тег для образа.
          # Для каждого пересобранного образа 
          # устанавливаем тег latest, чтобы потом
          # на сервере и в docker-compose.yml не указывать версию
          tags: ${{ secrets.DOCKER_USERNAME }}/task_tracker:latest

  deploy:
    runs-on: ubuntu-latest
    needs: 
      # Дождёмся билда всех образов
      - build_and_push_to_docker_hub
    steps:
    # - name: Checkout repo
    #   uses: actions/checkout@v3
    # # Копируем docker-compose.production.yml на продакшен-сервер
    # - name: Copy docker-compose.yml via ssh
    #   uses: appleboy/scp-action@master
    # # Передаём параметры для action appleboy/scp-action:
    #   with:
    #     host: ${{ secrets.HOST }}
    #     username: ${{ secrets.USER }}
    #     key: ${{ secrets.SSH_KEY }}
    #     passphrase: ${{ secrets.SSH_PASSPHRASE }}
    #     source: "docker-compose.production.yml"
    #     target: "taski"
    - name: Executing remote ssh commands to deploy
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.USER }}
        key: ${{ secrets.SSH_KEY }}
        # passphrase: ${{ secrets.SSH_PASSPHRASE }}
        # Параметр script передаёт в action appleboy/ssh-action команды,
        # которые нужно выполнить на сервере, 
        # с которым установлено соединение
        script: |
          sudo docker pull ${{ secrets.DOCKER_USERNAME }}/task_tracker:latest

          # Остановка и удаление старого контейнера
          sudo docker stop task_tracker_bot || true
          sudo docker rm task_tracker_bot || true

          # Запуск нового контейнера
          sudo docker run -d --name task_tracker_bot task_tracker_bot